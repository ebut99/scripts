#!/usr/bin/env bash

# Set some variables that will be used later
KUBEDIR="$HOME/.kube"
KUBECFG="config"

# Assign help text to variable for user later
HELP="Usage: kcs [ context-name | none | list ]"

# Ensure that only a single parameter was passed
# Display help text if more than 1 parameter was supplied
if [ "$#" -ne 1 ]; then
    echo "Error: Incorrect number of parameters; please supply only a valid Kubernetes context or valid command"
    echo
    echo $HELP
    exit 1
fi

# If the user supplied "--help", then provide help text
if [ "$1" = "--help" ]; then
    echo $HELP
    exit 0
fi

# Assign supplied parameter to variable for use later
KCFG="$1"

# Take action based on the input supplied by the user
case "$KCFG" in
    # If user supplied 'none', then remove default config file and exit cleanly
    # Report an error if no active context
    none)
        if [ ! -f "$KUBEDIR/$KUBECFG" ]; then
            echo "No active Kubernetes context"
            exit 1
        else
            rm -f "$KUBEDIR/$KUBECFG"
            exit 0
        fi
        ;;
    # If user supplied 'list', then list files in the default directory but hide
    # files matching the default config file name as defined earlier
    list)
        echo $(ls -l --hide="$KUBECFG" "$KUBEDIR" | tail -n +2 | grep -v '^d' | awk '{print $9}')
        exit 0
        ;;
    # If user supplied 'config', report an error and exit with an error code
    "$KUBECFG")
        echo "Not a selectable Kubernetes context; use 'kcs list' to see available contexts"
        exit 1
        ;;
    # If the user supplied anything else, check to see if it is a valid config file
    # If it is a valid config file, copy it to the default config file
    # Otherwise, report an error and exit with an error code
    *)
        if [ -f "$KUBEDIR/$KCFG" ]; then
            cp "$KUBEDIR/$KCFG" "$KUBEDIR/$KUBECFG"
            exit 0
        else
            echo "Invalid Kubernetes context; use 'kcs list' to see available contexts"
            exit 1
        fi
esac
